# Define the main branches as trigger
trigger:
  - master
  - development
   
variables:
  container_name: 'md'
  container_registry: 'debarragedocker'
  container_repository: 'quarantinecalculator'
  
  is_build: $[eq(variables['Build.Reason'], 'IndividualCI')]
 
pool:
  vmImage: 'ubuntu-latest'
 
stages:
- stage: preparation
  displayName: Preparation
  jobs:
  - job: version
    displayName: 'Determine Version'
    steps:
    - bash: |
        VERSION=$(git describe --long --always)
        echo "##vso[build.updatebuildnumber]$VERSION"
      displayName: "Set version"
 
- stage: test
  displayName: Test
  dependsOn: preparation
  jobs:
    - job: test
      steps:
      # Define the test steps for your project, for example
      - bash: npm i
         
 
- stage: build
  displayName: Build
  dependsOn: test
  jobs:
    - job: build
      displayName: "build"
      condition: and(succeeded(), eq(variables.is_build, true))
      steps:
      - bash: npm i && npm run build
      - task: Docker@2
        inputs:
          containerRegistry: '$(container_registry)'
          repository: '$(container_repository)/$(container_name)'
          arguments: |
            REACT_APP_ENVIRONMENT: $(Build.SourceBranchName)
            REACT_APP_VERSION: $(Build.BuildNumber)
            NODE_ENV: $(Build.SourceBranchName)
          command: 'buildAndPush'
          # Dockerfile is in the root of the project, it's a relative path
          Dockerfile: 'Dockerfile'
          # Context is current directory
          buildContext: '.'
          tags: |
            $(Build.BuildNumber)
            latest
    - job: helm
      displayName: 'Publish Helm'
      dependsOn: build
      condition: and(succeeded(), eq(variables.is_build, true))
      steps:
      - task: HelmDeploy@0
        displayName: "Helm package"
        inputs:
          command: 'package'
          chartPath: 'helm'
          destination: 'helm/package'
          save: false
          arguments: '--app-version $(Build.BuildNumber)'
      - publish: 'helm/package'
        artifact: '$(container_name)-chart'
      - publish: 'helm/values'
        artifact: '$(container_name)-values'
- stage: deploy
  displayName: Deploy
  dependsOn: build
  jobs:
    - deployment: helm
      displayName: 'Update Helm'
      environment: develpment
      condition: and(succeeded(), eq(variables.is_build, true))
      strategy:
        runOnce:
          preDeploy:
            steps:
              - download: current
                artifact: '$(container_name)-chart'
              - download: current
                artifact: '$(container_name)-values'
          deploy:
            steps:
            - task: HelmDeploy@0
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceConnection: 'development-db-prod-aks-aks-quarantinecalculator-development-1604158726370'
                namespace: 'quarantinecalculator-development'
                command: 'upgrade'
                chartType: 'FilePath'
                chartPath: '$(Pipeline.Workspace)/$(container_name)-chart/*.tgz'
                releaseName: 'quarantinecalculator-md'
