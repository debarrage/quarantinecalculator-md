# Define the main branches as trigger
trigger:
  batch: true
  branches:
    include:
      - main
      - development
   
variables:
  containerName: 'md'
  containerRegistry: 'debarragedocker'
  containerRegistryHost: 'debarragedocker.azurecr.io'
  containerRepository: 'quarantinecalculator'
  isBuild: $[or(eq(variables['Build.Reason'], 'IndividualCI'),eq(variables['Build.Reason'], 'BatchedCI'),eq(variables['Build.Reason'], 'Manual'))]
 
pool:
  vmImage: 'ubuntu-latest'
 
stages:
- stage: preparation
  displayName: Preparation
  jobs:
  - job: version
    displayName: 'Determine Version'
    steps:
    - bash: |
        VERSION=$(git describe --long --always)
        echo "##vso[build.updatebuildnumber]$VERSION"
      displayName: "Set version"
 
- stage: test
  displayName: Test
  dependsOn: preparation
  jobs:
    - job: test
      steps:
      # Define the test steps for your project, for example
      # - bash: npm i && npm run test:ci
      - bash: npm i
         
 
- stage: build
  displayName: Build
  dependsOn: test
  jobs:
    - job: build
      displayName: "build"
      condition: and(succeeded(), eq(variables.isBuild, true))
      steps:      
      - task: Bash@3
        displayName: 'Build App'
        inputs:
          targetType: 'inline'
          script: |
            export NODE_ENV=$(Build.SourceBranchName)
            export REACT_APP_ENVIRONMENT=$(Build.SourceBranchName)
            export REACT_APP_VERSION=$(Build.BuildNumber)
            export REACT_APP_INSTRUMENTATION_KEY=$(REACT_APP_INSTRUMENTATION_KEY)
            npm i && npm run build
      
      - task: Docker@2
        displayName: 'Docker build'
        inputs:
          containerRegistry: 'debarragedocker'
          repository: '$(containerRepository)/$(containerName)'
          command: 'build'
          Dockerfile: 'Dockerfile'
          buildContext: '.'
          tags: |
            $(Build.BuildNumber)
            latest
      - task: Docker@2
        displayName: 'Docker push'
        inputs:
          containerRegistry: '$(containerRegistry)'
          repository: '$(containerRepository)/$(containerName)'
          command: 'push'
          tags: |
            $(Build.BuildNumber)
            latest
    - job: helm
      displayName: 'Publish Helm'
      dependsOn: build
      condition: and(succeeded(), eq(variables.isBuild, true))
      steps:
      - task: HelmDeploy@0
        displayName: "Helm package"
        inputs:
          command: 'package'
          chartPath: 'helm'
          destination: 'helm/package'
          save: false
          arguments: '--app-version $(Build.BuildNumber)'
      - publish: 'helm/package'
        artifact: '$(containerName)-chart'
      - publish: 'helm/values'
        artifact: '$(containerName)-values'
- stage: deploy
  displayName: Deploy
  dependsOn: build
  jobs:
    - deployment: development
      displayName: 'Update Helm'
      environment: development
      condition: and(succeeded(), eq(variables.isBuild, true),eq(variables['Build.SourceBranchName'], 'development'))
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: '$(containerName)-chart'
            - download: current
              artifact: '$(containerName)-values'
            - task: HelmDeploy@0
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceConnection: 'development-db-prod-aks-aks-quarantinecalculator-development-1604158726370'
                namespace: 'quarantinecalculator-development'
                command: 'upgrade'
                chartType: 'FilePath'
                chartPath: '$(Pipeline.Workspace)/$(containerName)-chart/quarantinecalculator-md-0.6.6.tgz'
                releaseName: '$(containerRepository)-$(containerName)'
                overrideValues: 'image.repository=$(containerRegistryHost)/$(containerRepository)/$(containerName)'
                valueFile: '$(Pipeline.Workspace)/$(containerName)-values/values-development.yml'
    - deployment: production
      displayName: 'Update Helm'
      environment: production
      condition: and(succeeded(), eq(variables.isBuild, true),eq(variables['Build.SourceBranchName'], 'main'))
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: '$(containerName)-chart'
            - download: current
              artifact: '$(containerName)-values'
            - task: HelmDeploy@0
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceConnection: 'production-db-prod-aks-aks-quarantinecalculator-production-1604158748558'
                namespace: 'quarantinecalculator-production'
                command: 'upgrade'
                chartType: 'FilePath'
                chartPath: '$(Pipeline.Workspace)/$(containerName)-chart/quarantinecalculator-md-0.6.6.tgz'
                releaseName: '$(containerRepository)-$(containerName)'
                overrideValues: 'image.repository=$(containerRegistryHost)/$(containerRepository)/$(containerName)'
                valueFile: '$(Pipeline.Workspace)/$(containerName)-values/values-production.yml'