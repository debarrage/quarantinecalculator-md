# Default values for project.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Environment, used in labels
environment: development

# Define the release name to track it back to azure devops
release: unknown

# Minimal replica count
replicaCount: 1

# Pod disruption budget, will automatically be set to 0 when
minAvailable: 1

image:
  # The image repository, in most of the case it is in the form of 
  # container.registry.host/<your-repo-name>
  # The prefix can be omitted if it is the default
  repository: to-be-overridden
  # The image tag, the tag is optional and is preferably set by the .Chart.AppVersion. This version number can
  # be set during the packaging of the Helm chart using the --app-version flag.
  # tag: to-be-overridden
  # The container port
  port: 80
  # The http path to check the liveness, set it to null to remove it
  livenessPath: /
  # The name of the image pull secret
  imagePullSecret: docker-registry
  # Set the initial delay in seconds before the liveness probes kick in
  livenessInitialDelay: 5
  # Set the initial delay in seconds before the liveness probes kick in
  readinessInitialDelay: 5
  # Optionally you can set the following values to control the liveness and readiness probes
  # periodSeconds: 10
  # failureThreshold: 5
  # Azure Monitoring Environment
  collectEnvironment: true

service:
  # The port on which the service needs to be exposed
  port: 80

ingress:
  # Should enable ingress or not
  enabled: true
  
  # # Set true if you want to enable aad authentication via oauth2-proxy
  # aadAuthentication: true
  # aad:
  #   # You can find this in the properties blade of your app registration
  #   tenantId: 00000000-0000-0000-0000-00000000000
  #   # You can find this in the properties blade of your app registration
  #   clientId: 00000000-0000-0000-0000-00000000000
  #   # You can find this in the certificates & secrets blade of your app registration
  #   clientSecret: "very-secret"
  #   # The email domains to allow
  #   emailDomain: "*"

  
  # Optional value, with this value you can set a custom subdomain for the installation. In order to 
  # correctly install it, a DNS zone should be hosted in Azure for the domain given below. E.g. a DNS zone
  # for the romcloud.be domain and the DNS zone serves a subdomain configured via an NS record. That is 
  # regarded as the domain. The subdomain is then whatever you want. The default domain is indicated below. 
  # However if you want to set them both you need to overwrite both domain and subdomain to get the FQDN. Or 
  # you can set the host variable.
  # domain: "azure.romcloud.be"
  # subdomain: "test123"
  
  # Optional value, when not set the default value is the fqdn en will overwrite any domain or subdomain settings.
  host: "to-be-overridden"
  
  # Ingress path, this can be a simple path or a regex to capture groups. If capture groups are provided you should also fill in the reqrite target correctly
  # Read more: https://kubernetes.github.io/ingress-nginx/examples/rewrite/#rewrite-target
  path: /
  rewriteTarget: /
  
  # Enable cors
  cors: false
  
  # Set app root, for example the base url on your pod is /v1 you can use an app rout to redirect incoming / to /v1
  # appRoot: /
  
  # Provide extra annotations for the ingress, such as path rewrites... Do not forget to remove {} 
  # when you fill this in... Check all possible annotations on the following url:
  # https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/annotations/ 
  annotations: {}

# Define resources for your deployment. It is advised, certainly for JVM-based backends to omit the
# CPU limit and only put a request. Your POD can spike on startup. Also, keep the memory the same
# as it put your pods in the QoS class Burstable. It makes it more unlikely to be killed when the 
# node runs out of resources. 
resources:
  limits:
    memory: 125Mi
  requests:
    cpu: 100m
    memory: 125Mi

# Enable prometheus style scraping
# See also: https://docs.microsoft.com/nl-nl/azure/azure-monitor/insights/container-insights-prometheus-integration
# Scheme is http by default. The portis the same as the image port.
# prometheus:
#   path: /path/to/metrics/endpoint
#   scheme: http

# This is an example how secrets can be interpolated into your secrets file. A good practice
# is not to store your variables or secrets in the pipeline but to use an Azure Keyvault. Contact
# your ops friends...
# secrets:
#   this_is_very_secret: "this value will be overwritten by the pipeline"